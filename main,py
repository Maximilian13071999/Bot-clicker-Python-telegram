import asyncio
from keyboards import *
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.utils.markdown import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import datetime
from aiogram.dispatcher import filters
import sqlite3

storage = MemoryStorage()

def connect_db(db_name):
    connect = sqlite3.connect(db_name)
    cursor = connect.cursor()
    return (connect, cursor)

bot = Bot(token="5644768745:AAGOrfSr-ZI62Dylu6PXVgp4IBXBDFEf70U")
dp = Dispatcher(bot, storage = storage)

class casino_game(StatesGroup):
    mode = State()
    bet = State()
    choice = State()

@dp.message_handler(filters.Text(contains=["–ö–∞–∑–∏–Ω–æ"] , ignore_case=True))
async def casino(mes: types.Message):
    await casino_game.mode.set()
    await mes.answer(f"–î–ª—è –≤—ã–±–æ—Ä–∞ –ª—ë–≥–∫–æ–π –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã –Ω–∞–∂–º–∏—Ç–µ <b>Light game</b> \n"
                     f"–î–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏–≥—Ä—ã –Ω–∞–∂–º–∏—Ç–µ <b>Hard game</b> \n"
                     f"–î–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –≤ –±–∞—Å–∫–µ—Ç–±–æ–ª –Ω–∞–∂–º–∏—Ç–µ <b>Basketball</b> \n",parse_mode='HTML',  reply_markup=casino_kb)

@dp.message_handler(state=casino_game.mode)
async  def load_mode(message: types.Message , state: FSMContext):
    if not message.text in ["Light game", "Hard game", "Basketball"]:
        await state.finish()
        await casino(message)
    async with state.proxy() as data:
        data["mode"] = message.text
    await casino_game.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É: ")

async def back(message: types.Message , state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await start(message)
        return False
    else:
        return True

@dp.message_handler(state=casino_game.bet)
async def bet(message: types.Message , state: FSMContext):
    if back(message, state):
        connect, cursor = connect_db("game.db")
        cursor.execute(f"""SELECT cristals FROM game WHERE id = {message.chat.id}""")
        data = cursor.fetchone()
        if (not message.text.isdigit()):
            await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É: ")
            return

        if data[0] < int(message.text) :
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥!" , reply_markup=start_kb)
            await  state.finish()
            return
        else:
            async with state.proxy() as data:
                data["bet"] = message.text
                if data["mode"] == "Light game":
                    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–æ–∑–æ–Ω", reply_markup=casino_l)
                elif data["mode"] == "Hard game":
                    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–æ–∑–æ–Ω", reply_markup=casino_h)
                elif data["mode"] == "Basketball":
                    await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø–∞–¥—ë—Ç –∏–ª–∏ –Ω–µ—Ç" , reply_markup=basket_g)
        await casino_game.next()

@dp.message_handler(state=casino_game.choice)
async def choice(message: types.Message , state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await start(message)
        return
    connect, cursor = connect_db("game.db")
    cursor.execute(f"""SELECT  cristals FROM game WHERE id = {message.chat.id}""")
    data1 = cursor.fetchone()
    result = ""
    result_num = ""
    async with state.proxy() as data:
        if data["mode"] == "Basketball" and not message.text in ["–ü–æ–ø–∞–¥—ë—Ç", "–ù–µ –ø–æ–ø–∞–¥—ë—Ç"]:
            await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø–∞–¥—ë—Ç –∏–ª–∏ –Ω–µ—Ç" , reply_markup=basket_g)
            return

        if data["mode"] == "Hard game" or data["mode"] == "Light game":
            result = await bot.send_dice(message.chat.id)
        elif data["mode"] == "Basketball":
            result = await bot.send_dice(message.chat.id , emoji="üèÄ")
        await asyncio.sleep(2)
        result_num = result["dice"]["value"]
        if data["mode"] == "Hard game":
            if int(message.text) == result_num:
                await message.answer("–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", reply_markup=casino_kb)
                cursor.execute(
                    f"""UPDATE  game SET cristals  = {data1[0] + int(data["bet"]) * 6 } WHERE id =  {message.chat.id}""")
                connect.commit()
            else:
                await message.answer("–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!", reply_markup=casino_kb)
                cursor.execute(f"""UPDATE  game SET cristals  = {data1[0] - int(data["bet"])} WHERE id =  {message.chat.id}""")
                connect.commit()
            await state.finish()
            await casino_game.mode.set()
        elif data["mode"] == "Light game":
            if message.text == "1 - 3" and result_num in [1,2,3]:
                await message.answer("–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", reply_markup=casino_kb)
                cursor.execute(
                    f"""UPDATE  game SET cristals  = {data1[0] + int(data["bet"])} WHERE id =  {message.chat.id}""")
                connect.commit()
            elif message.text == "1 - 3" and result_num in [4,5,6]:
                await message.answer("–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!", reply_markup=casino_kb)
                cursor.execute(
                    f"""UPDATE  game SET cristals  = {data1[0] - int(data["bet"])} WHERE id =  {message.chat.id}""")
                connect.commit()
            elif message.text == "4 - 6" and result_num in [4,5,6]:
                await message.answer("–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", reply_markup=casino_kb)
                cursor.execute(
                    f"""UPDATE  game SET cristals  = {data1[0] + int(data["bet"])} WHERE id =  {message.chat.id}""")
                connect.commit()
            elif message.text == "4 - 6" and result_num in [1,2,3]:
                await message.answer("–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!", reply_markup=casino_kb)
                cursor.execute(
                    f"""UPDATE  game SET cristals  = {data1[0] - int(data["bet"])} WHERE id =  {message.chat.id}""")
                connect.commit()
            await state.finish()
            await casino_game.mode.set()
        elif data["mode"] == "Basketball":
            if message.text == "–ü–æ–ø–∞–¥—ë—Ç" and result_num in [4,5]:
                await message.answer("–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", reply_markup=casino_kb)
                cursor.execute(
                    f"""UPDATE  game SET cristals  = {data1[0] + int(data["bet"])} WHERE id =  {message.chat.id}""")
                connect.commit()
            elif message.text == "–ü–æ–ø–∞–¥—ë—Ç" and result_num in [1,2,3]:
                await message.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!", reply_markup=casino_kb)
                cursor.execute(
                    f"""UPDATE  game SET cristals  = {data1[0] - int(data["bet"])} WHERE id =  {message.chat.id}""")
                connect.commit()
            elif message.text == "–ù–µ –ø–æ–ø–∞–¥—ë—Ç" and result_num in [4,5]:
                await message.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!", reply_markup=casino_kb)
                cursor.execute(
                    f"""UPDATE  game SET cristals  = {data1[0] - int(data["bet"])} WHERE id =  {message.chat.id}""")
                connect.commit()
            elif message.text == "–ù–µ –ø–æ–ø–∞–¥—ë—Ç" and result_num in [1,2,3]:
                await message.answer("–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!", reply_markup=casino_kb)
                cursor.execute(
                    f"""UPDATE  game SET cristals  = {data1[0] + int(data["bet"])} WHERE id =  {message.chat.id}""")
                connect.commit()


@dp.message_handler(filters.Text(contains=["–ë–∞–ª–∞–Ω—Å"] , ignore_case=True))
async  def balance(message: types.Message):
    connect, cursor = connect_db("game.db")
    cursor.execute(f"""SELECT level , money , cristals , oil FROM game WHERE id = {message.chat.id}""")
    data = cursor.fetchone()
    await message.reply(f"–£ –≤–∞—Å: {data[1]} –º–æ–Ω–µ—Ç \n"
                        f"–£ –≤–∞—Å: {data[2]} –∫—Ä–∏—Å—Ç–∞–ª–æ–≤ \n"
                        f"–£ –≤–∞—Å: {data[3]} –Ω–µ—Ñ—Ç–∏")

@dp.message_handler(filters.Text(contains=["–§–∞—Ä–º"] , ignore_case=True))
async def farm(message: types.Message):
    connect , cursor = connect_db("game.db")
    await message.answer("–î–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!" , reply_markup=earn_kb)

@dp.message_handler(filters.Text(contains=["–ù–µ—Ñ—Ç—å"] , ignore_case=True))
async def farm(message: types.Message):
    connect , cursor = connect_db("game.db")
    await message.answer("–î–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ñ—Çb –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!" , reply_markup=earn2_kb)

@dp.callback_query_handler(text='get2')
async def earn_money(callback: types.CallbackQuery):
    connect, cursor = connect_db("game.db")
    cursor.execute(f"""SELECT level , oil FROM game WHERE id = {callback.message.chat.id}""")
    data = cursor.fetchone()
    cursor.execute(f"""UPDATE game SET 
    oil = {data[1] + data[0] * 3 } WHERE id = {callback.message.chat.id}""")
    connect.commit()
    await callback.answer(f"–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {data[0] * 3} –Ω–µ—Ñ—Ç–∏!" , show_alert=True)

@dp.callback_query_handler(text='get')
async def earn_money(callback: types.CallbackQuery):
    connect, cursor = connect_db("game.db")
    cursor.execute(f"""SELECT level , money FROM game WHERE id = {callback.message.chat.id}""")
    data = cursor.fetchone()
    cursor.execute(f"""UPDATE game SET 
    money = {data[1] + data[0]} WHERE id = {callback.message.chat.id}""")
    connect.commit()
    await callback.answer(f"–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {data[0]} –º–æ–Ω–µ—Ç!" , show_alert=True)

@dp.message_handler(filters.Text(contains=["–ú–∞–≥–∞–∑–∏–Ω"] , ignore_case=True))
async def shop(mes: types.Message):
    connect, cursor = connect_db("game.db")
    cursor.execute(f"""SELECT level FROM 
        game WHERE id  = {mes.chat.id}""")
    data = cursor.fetchone()
    await mes.answer(f"–£–≤–µ–ª–µ—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Å—Ç–æ–∏—Ç {data[0] * data[0] * 5} –º–æ–Ω–µ—Ç.\n"
                     f"–î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>Up Level</b> \n"
                     f"–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É  <b>Buy Cristalls</b> \n"
                     f"–ö—É—Ä—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤:\n "
                     f"12 –º–æ–Ω–µ—Ç = 1 –∫—Ä–∏—Å—Ç–∞–ª–ª \n"
                     f"38 –Ω–µ—Ñ—Ç–∏ = 1 –∫—Ä–∏—Å—Ç–∞–ª–ª \n"
                     f"–î–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∑–∞–¥ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>Back</b>" ,parse_mode='HTML',  reply_markup=shop_kb)

@dp.message_handler(filters.Text(contains=["Up Level"] , ignore_case=True))
async def uplevel(mes: types.Message):
    connect, cursor = connect_db("game.db")
    cursor.execute(f"""SELECT level , money  FROM 
            game WHERE id  = {mes.chat.id}""")
    data = cursor.fetchone()
    if data[1] < (data[0] * data[0] * 5):
        await mes.answer("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–≤–µ–Ω—å!" , reply_markup=shop_kb)
    else:
        cursor.execute((f"""UPDATE game SET (level , money) = 
        ({data[0] + 1} , {data[1] - (data[0] * data[0] * 5 )})
        WHERE id = {mes.chat.id}"""))
        connect.commit()
        await mes.answer(f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {data[0] + 1} —É—Ä–æ–≤–µ–Ω—å." , reply_markup=shop_kb)

@dp.message_handler(filters.Text(contains=["Buy Cristalls money"] , ignore_case=True))
async def buycrm(mes: types.Message):
    connect, cursor = connect_db("game.db")
    cursor.execute(f"""SELECT cristals , money  FROM 
            game WHERE id  = {mes.chat.id}""")
    data = cursor.fetchone()
    if data[1] < 12 :
        await mes.answer("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!" , reply_markup=shop_kb)
    else:
        cursor.execute((f"""UPDATE game SET (cristals , money) = 
        ({data[0] + 1} , {data[1] - 12})
        WHERE id = {mes.chat.id}"""))
        connect.commit()
        await mes.answer(f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {data[0] + 1} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤" , reply_markup=shop_kb)

@dp.message_handler(filters.Text(contains=["Buy Cristalls oil"] , ignore_case=True))
async def buycro(mes: types.Message):
    connect, cursor = connect_db("game.db")
    cursor.execute(f"""SELECT cristals , oil  FROM 
            game WHERE id  = {mes.chat.id}""")
    data = cursor.fetchone()
    if data[1] < 38 :
        await mes.answer("–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤!" , reply_markup=shop_kb)
    else:
        cursor.execute((f"""UPDATE game SET (cristals , oil) = 
        ({data[0] + 1} , {data[1] - 38})
        WHERE id = {mes.chat.id}"""))
        connect.commit()
        await mes.answer(f"–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è {data[0] + 1} –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤" , reply_markup=shop_kb)

@dp.message_handler(filters.Text(contains=["–¢–æ–ø"] , ignore_case=True))
async def leader(mes: types.Message):
    connect, cursor = connect_db("game.db")
    cursor.execute(f"""SELECT *  FROM game ORDER BY cristals DESC """)
    data = cursor.fetchall()
    leaderboard = "<b>–¢–æ–ø:</b>\n"
    for i in range(0,len(data)):
        leaderboard += f"{data[i][0]} - {data[i][2]}\n"
    await mes.answer(leaderboard,reply_markup=start_kb , parse_mode="HTML")

@dp.message_handler(filters.Text(contains=["–¢–æ–ø"] , ignore_case=True))
async def leader(mes: types.Message):
    connect, cursor = connect_db("game.db")
    cursor.execute(f"""SELECT *  FROM game ORDER BY cristals DESC """)
    data = cursor.fetchall()
    leaderboard = "<b>–¢–æ–ø:</b>\n"
    for i in range(0,len(data)):
        leaderboard += f"{data[i][0]} - {data[i][2]}\n"
    await mes.answer(leaderboard,reply_markup=start_kb , parse_mode="HTML")

@dp.message_handler(commands=["start"])
@dp.message_handler(filters.Text(contains=["Back"] , ignore_case=True))
@dp.message_handler(filters.Text(contains=["–ù–∞–∑–∞–¥"], ignore_case=True))
async def start(message:types.Message):
    connect, cursor = connect_db("game.db")
    await message.reply("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏—Å—Å—Ç–∞–ª–æ–≤. \n"
                        "\n"
                        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∫–æ–ª—å–∫–æ —É —Ç–µ–±—è –¥–µ–Ω–µ–≥ –Ω–∞–∂–º–∏ <b>–ë–∞–ª–∞–Ω—Å</b>.  \n" 
                        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–Ω–µ–≥ –Ω–∞–∂–º–∏ <b>–§–∞—Ä–º</b> \n"
                        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏—Å—Å—Ç–∞–ª–æ–≤ –∏–ª–∏ –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–∞–∂–º–∏ <b>–ú–∞–≥–∞–∑–∏–Ω</b> \n"
                        "–î–ª—è –ø—Ä–æ—Å–º—Ç–æ—Ä–∞ –∫—Ç–æ —Å–µ–π—á–∞—Å –≤ —Ç–æ–ø–µ –Ω–∞–∂–º–∏ <b>–¢–æ–ø</b> \n" , parse_mode='HTML' , reply_markup=start_kb )

    cursor.execute("""
            CREATE TABLE IF NOT EXISTS game(
                name TEXT,
                money INTEGER,
                cristals INTEGER,
                id INTEGER,
                level INTEGER,
                oil INTEGER,
                UNIQUE(id)
            );
        """)
    connect.commit()
    cursor.execute("""INSERT OR IGNORE INTO game VALUES(?,?,?,?,?,?); """ ,
                   [message.from_user.username , 0 , 0 , message.chat.id , 1 , 0])
    connect.commit()

@dp.message_handler(commands=['drop'])
async def send_welcome(message: types.Message):
    connect, cursor = connect_db("game.db")
    cursor.execute(f"DROP TABLE game")
    connect.commit()

executor.start_polling(dp, skip_updates=True)
